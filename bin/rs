#!/usr/bin/python
import os, time, sys, re, math
from multiprocessing import Process
import threading, datetime, json
from optparse import OptionParser


RS_ROOT = os.getenv("RS_ROOT", None)
if not RS_ROOT:
    print "source vars file first."
    sys.exit()


sys.path.append(os.path.join(RS_ROOT, "python"))


# ENV controling our behaviour
# Do we have X forwarding?
RS_XFORWARD = os.getenv("DISPLAY", None)
if not RS_XFORWARD:
    print "Warning! No X forwarding will take place."


# Where is store images on RPi?
RS_IMAGES = os.getenv("RS_IMAGES", None)
if not RS_IMAGES:
    print "Error! Can't work without RS_IMAGES env var. Quiting now."
    sys.exit()


RS_REMOTE=None
RS_LENS_FILE = os.path.join(RS_ROOT, "Sony28-70calibration.json")


try:
    import rpyc
    RS_REMOTE    = os.getenv("RS_REMOTE",    None)
    RS_USERNAME  = os.getenv("RS_USER_NAME", None)
    RPYC_PORT    = os.getenv("RPYC",         55653)
    print "RS_REMOTE: " + RS_REMOTE
    print "User: " + RS_USER_NAME
    print "port: " + str(RPYC_PORT) 
except:
    print "Can't import rpyc. No remote execution will take place."


# CLI interface. 
def parseOptions(argv):
    usage = "usage: %prog [options] arg"
    parser = OptionParser(usage)

    #Options:
    parser.add_option("-m", "--move",       dest="move_rig",action="store",   default=None,  help="Move head.")
    parser.add_option("",   "--zoom",       dest="zoom",    action="store",   default=None,  help="Unlike --move this takes percentage of zoom, \
        and checkes with lenses how to deal with that. 0 = widest, 100 longest")
    parser.add_option("",   "--reset-rig",  dest="reset_rig",action="store_true",   default=None,  help="Force reset of rig state for provided values.")
    parser.add_option("-c", "--capture",    dest="capture", action="store",   default=None,  help="Capture an image")
    parser.add_option("",   "--comment",    dest="comment", action="store",    default=None,  help="Saves few words desribing photo / video.")
    parser.add_option("-p", "--preview",    dest="preview", action="store",   default=None,  help="Make preview image")
    parser.add_option("-M", "--movie",      dest="movie",   action="store",   default=None,  help="Capture the movie.")
    parser.add_option("-s", "--show",       dest="show",    action="store",   default=None,  help="Show the image either by name or index.")
    parser.add_option("",   "--shutter",    dest="shutter", action="store",   default=None,  help="Sets shutter speed.")
    parser.add_option("",   "--fstop",      dest="fstop",   action="store",   default=None,  help="Sets fstop of camera.")
    parser.add_option("",   "--iso",        dest="iso",     action="store",   default=None,  help="Sets ISO of camera.")
    parser.add_option("",   "--exp-comp",   dest="exposure_compensation",     action="store",   default=0,  help="Sets exposure compensation.")
    parser.add_option("-P", "--panorama",   dest="panorama",action="store",   default=None,  help="Creates panoramic image: 10x5 (horizontal x vertical shots)")
    parser.add_option("",   "--rotate",     dest="rotate",  action="store", type="int",    default=0,       help="Rotate the image.")
    parser.add_option("",   "--resize",     dest="resize",  action="store", type="float",  default=1.0,     help="Resize the image.")
    parser.add_option("",   "--set-config", dest="set_config",  action="store", default=None,                   help="Sets various camera settings.")
    parser.add_option("",   "--get-config", dest="get_config",  action="store", default=None,               help="Gets various camera settings.")
    parser.add_option("",   "--execute",    dest="execute", action="store", type='string', default=None,   help="Executes arbitrary command.")
    # parser.add_option("",   "--sync",       dest="sync",    action="store_true", default=False, help="Synchronize entire remote folder.")
    parser.add_option("-d", "--download",   dest="download", action="store_true", default=False,     help="Download the image after capture (only with 'capture' option.")
    parser.add_option("-U", "--upload-file",dest="upload_file",   action="store", type='string', default=None,   help="Upload specific file to internet account (Dropbox). ")
    parser.add_option("-u", "--upload",     dest="upload",   action="store_true", default=None,   help="Upload the image to internet account (Dropbox). ")
    parser.add_option("",   "--calibrate-lens", dest="calibrate_lens",   action="store", default=None,   help="Run calibration on lens length, note procedure is dangerous... ")
    parser.add_option("",   "--low",   dest="lowquality", action="store_true", default=False, help="Fast track to set low quality image (for testing)") 
    parser.add_option("",   "--high",  dest="highquality", action="store_true", default=False, help="Fast track to set high quality image (for testing)")
    parser.add_option("-l", "--label", dest="label", action="store", default=None, help="Add label to image filename.")
    (opts, args) = parser.parse_args(argv)
    return opts, args, parser




def clamp(x, m=-1023, M=1023):
    """Basic clamp"""
    if x < m: return m
    if x > M: return M
    return x



def move_head_smooth(ax, ay, az, pow_=2.2, steps=10.0):
    """WIP.
    """
    from time import sleep
    x = (clamp(ax) + 1024)
    y = (clamp(ay) + 1024)
    z = (clamp(az) + 1024)
    step = 1.0 / steps
    for i in range(int(steps)):
        ps = pow(step*i, pow_)
        command = ["./ronin", "0", str(x*ps), "1", str(y*ps), "3", str(z*ps)]
        open_pipe(command)
    sleep(2)



def show_image(filename, console=False, rotate=0, resize=1.0):
    """ Not used atm. 
    """
    from sys import platform

    if not RS_EXECUTE_REMOTE:    
        if platform == "darwin":
            return open_pipe(['open', filename])
        elif platform == "linux2":
            if rotate != 0 or resize != 1.0:
                out, error = open_pipe(['oiiotool', filename, "--rotate", str(rotate), 
                    "--resize", "%s" % str(resize*100),  '-o', filename])
            if not console: 
                return open_pipe(['feh', filename])
            else:
                return open_pipe(['tiv', filename])
    else:
        if platform == "darwin":
            command = ["open", filename]
        elif platform == "linux2":
            command = ['xdg-open', filename]
        return open_pipe(command, remote=False)



def make_preview_from_raw(filename):
    """ Get embedded image from raw capture. 
    """
    from shell import ShellCommander
    commander = ShellCommander(remote=RS_REMOTE)
    command = "ufraw-batch --overwrite --embedded-image \
        --out-type=jpg --shrink=2 %s" % filename
    command = command.split()
    return commander.open_pipe(command)



def compute_hdri(fstops=5):
    """Not used at the moment."""
    for stop in range(fstops):
        current_fstop = get_current(get_config("f-number")[0])
        current_fstop = float(current_fstop)
        filename = "hdri_%s.arw" % stop
        set_fstop(current_fstop+1)
        capture_and_download(filename, 0)



def process_rig_arguments(args):
    """Small utility to parse --move args.
    """
    index = 0
    axies = [0,0,0]
    args  = args.split(",")
    for a in args:
        try:
            axies[index] = float(a)
            index += 1
        except:
            index += 1
            print "Can't parse %s " % str(a)
            print "Ignoring it."
    return axies


def calibrate_lens(lens_name, camera, rig, angular_length=37):
    """
    """
    def find_lense_details(exif, tags):
        results = {}
        for line in exif.split("\n"):
            for tag in tags:
                if line.startswith(tag):
                    if len(line.split(":")) == 2:
                        data = line.split(":")[-1]
                        results[tag] = data
        return results


    from shell import ShellCommander
    if rig.log['state']['zoom'] != 0.0:
        print "Make sure lenses are in widest position \
            and reset rig state (with --reset command)"
        return False

    filename  = lens_name + "calibration.json"
    angle     = 0
    length    = None
    tmpfile   = '/tmp/zoomtest.jpg'
    commander = ShellCommander()
    # Set temporarily to low quality to speed up things.
    camera.set_config("imagequality", '0')
    camera.set_config("imagesize", '2')

    # create first here, so then we just append:
    if not os.path.isfile(filename):
        with open(filename, 'w') as file:
            json.dump({}, file)

    for angle in range(angular_length):
        with open(filename, 'r') as file:
            focal_map = json.load(file)
        file.close()
        camera.capture_and_download_to_PI(tmpfile)
        read_tags = ['exiftool', '-s', '-s', '-FOV', '-FocalLength', tmpfile]
        output, error = commander.open_pipe(read_tags)
        if error:
            return False
        lens_details = find_lense_details(output,  ('FOV', 'FocalLength'))
        if not lens_details:
            return False

        fov   = float(lens_details['FOV'].replace('deg', ''))
        focal = float(lens_details['FocalLength'].replace('mm', ''))
        # Save and proceed
        step = {'fov': fov, 'focal': focal}
        focal_map[angle] = step

        with open(filename, 'w') as file:
            json.dump(focal_map, file, indent=4)

        file.close()
        rig.rotate('zoom', 1)
        angle += 1

    camera.set_config("imagequality", '3')
    camera.set_config("imagesize", '0')
    return True



def main():
    """ Main. Parse commnd lines, sets camera config first, then executes shoot. 
    """
    from gpio.rig import Rig
    from shell import ShellCommander
    from panorama import Panoramic
    from utility import mock_auto_filename
    
    # Command line
    opts, args, parser = parseOptions(sys.argv[1:])

    # # Back door to remotly execute anything
    if opts.execute:
        commander = ShellCommander(remote=False)
        output, error = commander.open_pipe(opts.execute.split(" "))
        print output
        if error:
            print error

    # Rig operations. cmd arg can be one, two or three numbers
    # separated with ,
    if opts.move_rig: 
        axies = process_rig_arguments(opts.move_rig)
        rig = Rig()
        rig.rotate('y', axies[0])
        rig.rotate('x', axies[1])
        rig.rotate('zoom', axies[2])
        if opts.reset_rig:
            print "Reseting rig memory:", 
            print rig.force_state(*axies)


    # Camera setup
    from camera.sony import A7 as Camera
    camera = Camera()

    # Fast track to sets low/fast quality images, 
    # it cam be overwriten with --set-config anyway.:
    if opts.lowquality:
        camera.set_config("imagequality", '0')
        camera.set_config("imagesize", '2')
    if opts.highquality:
        camera.set_config("imagequality", '3')
        camera.set_config("imagesize", '0')


    # Sets arbitrary config (basic gphoto2 wrapper).
    if opts.set_config:
        items = opts.set_config.split("=")
        assert len(items) == 2
        name, value = items
        camera.set_config(name, value)


    # Reads current config. 
    if opts.get_config:
        config = camera.get_current_config(opts.get_config)
        print config


    # Sets filename in case user did't do it.
    if opts.capture == "auto":
        opts.capture = mock_auto_filename(camera, prefix=RS_IMAGES, appendix=opts.label)
        

    # Sets camera shooting properties:
    if opts.shutter:
        camera.set_shutter(opts.shutter)
    if opts.fstop:
        camera.set_fstop(opts.fstop)
    if opts.iso:
        camera.set_iso(opts.iso)
    if opts.exposure_compensation:
        camera.set_exposure_compensation(opts.exposure_compensation)


    # Preview:
    if opts.preview and not opts.capture: 
        preview_filename = os.path.join(RS_IMAGES, "preview_%s.jpg" % opts.preview)
        output, error    = camera.make_preview(preview_filename)
        if error:
            print "WARNING: Can't make new preview. Outdated image!!!"
            print error
        print output


    # Capture the image:
    if opts.capture:
        output, error = camera.capture_image(opts.capture, opts.download)
        if error:
            print error
        print output
        # Do something with an image being taken:
        if opts.preview and opts.download:
            output,  error = make_preview_from_raw(opts.capture)
            if error:
                print error
            print output


    # Record video: 
    if opts.movie:
        camera.capture_movie(opts.movie)


    # Send remotely to our computer 
    if opts.capture and opts.download:
        if not RS_REMOTE:
            print "Can't download without remote connection."
        commander = ShellCommander(True)
        output, error = commander.rsync(opts.capture, opts.capture)
        if error:
            print error
        print output


    # Saves a comment:
    if opts.comment:
        now     = datetime.datetime.now().replace(microsecond=0)
        comment = {'date': now.isoformat(), 'comment': opts.comment,
        'file': opts.capture, 'preview': opts.preview, 'movie': opts.movie,
        'panorama': opts.panorama }
        if opts.capture:
            comment_filename = os.path.splitext(opts.capture)[0]
        elif opts.panorama:
            comment_filename = mock_auto_filename(camera, prefix=RS_IMAGES,appendix=opts.label)
        with open(comment_filename + ".json", 'w') as file:
            json.dump(comment, file, indent=4)


    if opts.panorama: 
        # 'x' means that user expresses himself 
        # in term of brackes: 180-0,10x1
        spreads, res = opts.panorama.split(",")
        angles = [float(x) for x in spreads.split("-")]
        images = [int(x) for x in res.split("x")]
        rig  = Rig()
        pano = Panoramic(camera, rig)
        # What was chosen has to be corrected for current lenses:
        settings = pano.compute_panorama_details(angles, images, RS_LENS_FILE)
        pano_filename = mock_auto_filename(camera, prefix=RS_IMAGES, appendix=opts.label)
        if pano.set_camera_into_start_position(settings):
            print "Start making pano..."
            pano.make_panorama(pano_filename, download=opts.download)


    # We need this per lens writen to file and specified oin global variables
    # at the top of this file RS_LENSE_FILE
    if opts.calibrate_lens:
        rig = Rig()
        print calibrate_lens(opts.calibrate_lens, camera, 
            rig, camera.lens.angular_length) 


    # print o, e
    #     show_image(opts.capture)
    # elif opts.upload:
    #     command = ["./rs", "-U", opts.capture]
    #     open_pipe(command, remote=RS_EXECUTE_REMOTE)
    # else:   
    #     # Download just embedded jpg from a raw footage.
    #     file_, ext = os.path.splitext(opts.capture)
    #     preview    = file_ + ".embedded" + ".jpg"
    #     o, e = rsync(preview)
    #     show_image(preview, rotate=0, resize=1)


    # # Show the image:
    # if opts.show:
    #     if opts.show.isdigit():
    #         image_index = int(opts.show)
    #         image_filename = None
    #     else:
    #         image_index = -1
    #         image_filename = opts.show
        


    # if opts.panorama:
    #     pano_detail = compute_panorama()



    # if opts.upload_file:
    #     upload_to_dropbox(opts.upload_file)




if __name__ == "__main__": 
    main()


# print get_config("capturemode")
# print list_config()
# print open_pipe_ssh(['ls', '-la', '/tmp'])
# capture_movie(5)
# print haov_from_focal_length(50)
# h, v = aov_from_focal_length(24.0)
# print compute_panorama(h, v, 180, 180)
# show_preview()
# set_autofocus(True)
# set_shutter("1/50")
# set_fstop(4.0)
# fstop = get_config("f-number")
# print get_current(fstop[0])
# compute_hdri()
# set_config("/main/capturesettings/expprogram", 5)
# set_config("/main/capturesettings/capturemode", 0)
# set_config("/main/capturesettings/imagequality", 3)
# set_config("/main/other/d21b", 0 )
# show_preview()
# set_iso(10000)

# raspberry
# /main/actions/autofocus                                                        
# /main/actions/capture
# /main/actions/bulb
# /main/actions/movie
# /main/actions/opcode
# /main/status/serialnumber
# /main/status/manufacturer
# /main/status/cameramodel
# /main/status/deviceversion
# /main/status/vendorextension
# /main/status/batterylevel
# /main/imgsettings/imagesize
# /main/imgsettings/iso
# /main/imgsettings/colortemperature
# /main/imgsettings/whitebalance
# /main/capturesettings/exposurecompensation
# /main/capturesettings/flashmode
# /main/capturesettings/f-number
# /main/capturesettings/imagequality
# /main/capturesettings/focusmode
# /main/capturesettings/expprogram
# /main/capturesettings/aspectratio
# /main/capturesettings/capturemode
# /main/capturesettings/exposuremetermode
# /main/capturesettings/shutterspeed
